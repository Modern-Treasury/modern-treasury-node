// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.

import { Metadata, asTextContentResult } from 'modern-treasury-mcp/tools/types';

import { Tool } from '@modelcontextprotocol/sdk/types.js';
import ModernTreasury from 'modern-treasury';

export const metadata: Metadata = {
  resource: 'expected_payments',
  operation: 'write',
  tags: [],
  httpMethod: 'patch',
  httpPath: '/api/expected_payments/{id}',
  operationId: 'updateExpectedPayment',
};

export const tool: Tool = {
  name: 'update_expected_payments',
  description:
    "When using this tool, always use the `jq_filter` parameter to reduce the response size and improve performance.\n\nOnly omit if you're sure you don't need the data.\n\nupdate expected payment",
  inputSchema: {
    type: 'object',
    properties: {
      id: {
        type: 'string',
      },
      amount_lower_bound: {
        type: 'integer',
        description:
          "The lowest amount this expected payment may be equal to. Value in specified currency's smallest unit. e.g. $10 would be represented as 1000.",
      },
      amount_upper_bound: {
        type: 'integer',
        description:
          "The highest amount this expected payment may be equal to. Value in specified currency's smallest unit. e.g. $10 would be represented as 1000.",
      },
      counterparty_id: {
        type: 'string',
        description: 'The ID of the counterparty you expect for this payment.',
      },
      currency: {
        $ref: '#/$defs/currency',
      },
      date_lower_bound: {
        type: 'string',
        description: 'The earliest date the payment may come in. Format: yyyy-mm-dd',
        format: 'date',
      },
      date_upper_bound: {
        type: 'string',
        description: 'The latest date the payment may come in. Format: yyyy-mm-dd',
        format: 'date',
      },
      description: {
        type: 'string',
        description: 'An optional description for internal use.',
      },
      direction: {
        type: 'string',
        description:
          'One of credit or debit. When you are receiving money, use credit. When you are being charged, use debit.',
        enum: ['credit', 'debit'],
      },
      internal_account_id: {
        type: 'string',
        description: 'The ID of the Internal Account for the expected payment.',
      },
      metadata: {
        type: 'object',
        description:
          'Additional data represented as key-value pairs. Both the key and value must be strings.',
      },
      reconciliation_filters: {
        type: 'object',
        description: 'The reconciliation filters you have for this payment.',
      },
      reconciliation_groups: {
        type: 'object',
        description: 'The reconciliation groups you have for this payment.',
      },
      reconciliation_rule_variables: {
        type: 'array',
        description: 'An array of reconciliation rule variables for this payment.',
        items: {
          $ref: '#/$defs/reconciliation_rule',
        },
      },
      remittance_information: {
        type: 'string',
        description:
          'For `ach`, this field will be passed through on an addenda record. For `wire` payments the field will be passed through as the "Originator to Beneficiary Information", also known as OBI or Fedwire tag 6000.',
      },
      statement_descriptor: {
        type: 'string',
        description:
          'The statement description you expect to see on the transaction. For ACH payments, this will be the full line item passed from the bank. For wire payments, this will be the OBI field on the wire. For check payments, this will be the memo field.',
      },
      status: {
        type: 'string',
        description: "The Expected Payment's status can be updated from partially_reconciled to reconciled.",
        enum: ['reconciled'],
      },
      type: {
        $ref: '#/$defs/expected_payment_type',
      },
    },
    $defs: {
      currency: {
        type: 'string',
        description: 'Three-letter ISO currency code.',
        enum: [
          'AED',
          'AFN',
          'ALL',
          'AMD',
          'ANG',
          'AOA',
          'ARS',
          'AUD',
          'AWG',
          'AZN',
          'BAM',
          'BBD',
          'BCH',
          'BDT',
          'BGN',
          'BHD',
          'BIF',
          'BMD',
          'BND',
          'BOB',
          'BRL',
          'BSD',
          'BTC',
          'BTN',
          'BWP',
          'BYN',
          'BYR',
          'BZD',
          'CAD',
          'CDF',
          'CHF',
          'CLF',
          'CLP',
          'CNH',
          'CNY',
          'COP',
          'CRC',
          'CUC',
          'CUP',
          'CVE',
          'CZK',
          'DJF',
          'DKK',
          'DOP',
          'DZD',
          'EEK',
          'EGP',
          'ERN',
          'ETB',
          'EUR',
          'EURC',
          'FJD',
          'FKP',
          'GBP',
          'GBX',
          'GEL',
          'GGP',
          'GHS',
          'GIP',
          'GMD',
          'GNF',
          'GTQ',
          'GYD',
          'HKD',
          'HNL',
          'HRK',
          'HTG',
          'HUF',
          'IDR',
          'ILS',
          'IMP',
          'INR',
          'IQD',
          'IRR',
          'ISK',
          'JEP',
          'JMD',
          'JOD',
          'JPY',
          'KES',
          'KGS',
          'KHR',
          'KMF',
          'KPW',
          'KRW',
          'KWD',
          'KYD',
          'KZT',
          'LAK',
          'LBP',
          'LKR',
          'LRD',
          'LSL',
          'LTL',
          'LVL',
          'LYD',
          'MAD',
          'MDL',
          'MGA',
          'MKD',
          'MMK',
          'MNT',
          'MOP',
          'MRO',
          'MRU',
          'MTL',
          'MUR',
          'MVR',
          'MWK',
          'MXN',
          'MYR',
          'MZN',
          'NAD',
          'NGN',
          'NIO',
          'NOK',
          'NPR',
          'NZD',
          'OMR',
          'PAB',
          'PEN',
          'PGK',
          'PHP',
          'PKR',
          'PLN',
          'PYG',
          'PYUSD',
          'QAR',
          'RON',
          'RSD',
          'RUB',
          'RWF',
          'SAR',
          'SBC',
          'SBD',
          'SCR',
          'SDG',
          'SEK',
          'SGD',
          'SHP',
          'SKK',
          'SLL',
          'SOS',
          'SRD',
          'SSP',
          'STD',
          'SVC',
          'SYP',
          'SZL',
          'THB',
          'TJS',
          'TMM',
          'TMT',
          'TND',
          'TOP',
          'TRY',
          'TTD',
          'TWD',
          'TZS',
          'UAH',
          'UGX',
          'USD',
          'USDB',
          'USDC',
          'USDP',
          'USDT',
          'UYU',
          'UZS',
          'VEF',
          'VES',
          'VND',
          'VUV',
          'WST',
          'XAF',
          'XAG',
          'XAU',
          'XBA',
          'XBB',
          'XBC',
          'XBD',
          'XCD',
          'XDR',
          'XFU',
          'XOF',
          'XPD',
          'XPF',
          'XPT',
          'XTS',
          'YER',
          'ZAR',
          'ZMK',
          'ZMW',
          'ZWD',
          'ZWL',
          'ZWN',
          'ZWR',
        ],
      },
      reconciliation_rule: {
        type: 'object',
        properties: {
          amount_lower_bound: {
            type: 'integer',
            description:
              "The lowest amount this expected payment may be equal to. Value in specified currency's smallest unit. e.g. $10 would be represented as 1000.",
          },
          amount_upper_bound: {
            type: 'integer',
            description:
              "The highest amount this expected payment may be equal to. Value in specified currency's smallest unit. e.g. $10 would be represented as 1000.",
          },
          direction: {
            type: 'string',
            description:
              'One of credit or debit. When you are receiving money, use credit. When you are being charged, use debit.',
            enum: ['credit', 'debit'],
          },
          internal_account_id: {
            type: 'string',
            description: 'The ID of the Internal Account for the expected payment',
          },
          counterparty_id: {
            type: 'string',
            description: 'The ID of the counterparty you expect for this payment',
          },
          currency: {
            $ref: '#/$defs/currency',
          },
          custom_identifiers: {
            type: 'object',
            description: 'A hash of custom identifiers for this payment',
          },
          date_lower_bound: {
            type: 'string',
            description: 'The earliest date the payment may come in. Format is yyyy-mm-dd',
            format: 'date',
          },
          date_upper_bound: {
            type: 'string',
            description: 'The latest date the payment may come in. Format is yyyy-mm-dd',
            format: 'date',
          },
          type: {
            type: 'string',
            description:
              'One of ach, au_becs, bacs, book, check, eft, interac, provxchange, rtp, sen, sepa, signet wire',
            enum: [
              'ach',
              'au_becs',
              'bacs',
              'base',
              'book',
              'card',
              'chats',
              'check',
              'cross_border',
              'dk_nets',
              'eft',
              'ethereum',
              'hu_ics',
              'interac',
              'masav',
              'mx_ccen',
              'neft',
              'nics',
              'nz_becs',
              'pl_elixir',
              'polygon',
              'provxchange',
              'ro_sent',
              'rtp',
              'se_bankgirot',
              'sen',
              'sepa',
              'sg_giro',
              'sic',
              'signet',
              'sknbi',
              'solana',
              'wire',
              'zengin',
            ],
          },
        },
        required: ['amount_lower_bound', 'amount_upper_bound', 'direction', 'internal_account_id'],
      },
      expected_payment_type: {
        type: 'string',
        description:
          'One of: ach, au_becs, bacs, book, check, eft, interac, provxchange, rtp, sen, sepa, signet, wire.',
        enum: [
          'ach',
          'au_becs',
          'bacs',
          'base',
          'book',
          'card',
          'chats',
          'check',
          'cross_border',
          'dk_nets',
          'eft',
          'ethereum',
          'hu_ics',
          'interac',
          'masav',
          'mx_ccen',
          'neft',
          'nics',
          'nz_becs',
          'pl_elixir',
          'polygon',
          'provxchange',
          'ro_sent',
          'rtp',
          'se_bankgirot',
          'sen',
          'sepa',
          'sg_giro',
          'sic',
          'signet',
          'sknbi',
          'solana',
          'wire',
          'zengin',
        ],
      },
    },
  },
};

export const handler = async (client: ModernTreasury, args: Record<string, unknown> | undefined) => {
  const { id, ...body } = args as any;
  return asTextContentResult(await client.expectedPayments.update(id, body));
};

export default { metadata, tool, handler };
