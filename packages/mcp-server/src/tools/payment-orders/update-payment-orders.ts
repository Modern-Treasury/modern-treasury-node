// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.

import { Metadata, asTextContentResult } from 'modern-treasury-mcp/tools/types';

import { Tool } from '@modelcontextprotocol/sdk/types.js';
import ModernTreasury from 'modern-treasury';

export const metadata: Metadata = {
  resource: 'payment_orders',
  operation: 'write',
  tags: [],
  httpMethod: 'patch',
  httpPath: '/api/payment_orders/{id}',
  operationId: 'updatePaymentOrder',
};

export const tool: Tool = {
  name: 'update_payment_orders',
  description:
    "When using this tool, always use the `jq_filter` parameter to reduce the response size and improve performance.\n\nOnly omit if you're sure you don't need the data.\n\nUpdate a payment order",
  inputSchema: {
    type: 'object',
    properties: {
      id: {
        type: 'string',
      },
      accounting: {
        $ref: '#/$defs/accounting',
      },
      accounting_category_id: {
        type: 'string',
        description:
          'The ID of one of your accounting categories. Note that these will only be accessible if your accounting system has been connected.',
      },
      accounting_ledger_class_id: {
        type: 'string',
        description:
          'The ID of one of your accounting ledger classes. Note that these will only be accessible if your accounting system has been connected.',
      },
      amount: {
        type: 'integer',
        description:
          "Value in specified currency's smallest unit. e.g. $10 would be represented as 1000 (cents). For RTP, the maximum amount allowed by the network is $100,000.",
      },
      charge_bearer: {
        type: 'string',
        description:
          'The party that will pay the fees for the payment order. See https://docs.moderntreasury.com/payments/docs/charge-bearer to understand the differences between the options.',
        enum: ['shared', 'sender', 'receiver'],
      },
      counterparty_id: {
        type: 'string',
        description: 'Required when receiving_account_id is passed the ID of an external account.',
      },
      currency: {
        $ref: '#/$defs/currency',
      },
      description: {
        type: 'string',
        description: 'An optional description for internal use.',
      },
      direction: {
        type: 'string',
        description:
          "One of `credit`, `debit`. Describes the direction money is flowing in the transaction. A `credit` moves money from your account to someone else's. A `debit` pulls money from someone else's account to your own. Note that wire, rtp, and check payments will always be `credit`.",
        enum: ['credit', 'debit'],
      },
      effective_date: {
        type: 'string',
        description:
          "Date transactions are to be posted to the participants' account. Defaults to the current business day or the next business day if the current day is a bank holiday or weekend. Format: yyyy-mm-dd.",
        format: 'date',
      },
      expires_at: {
        type: 'string',
        description: 'RFP payments require an expires_at. This value must be past the effective_date.',
        format: 'date-time',
      },
      fallback_type: {
        type: 'string',
        description:
          'A payment type to fallback to if the original type is not valid for the receiving account. Currently, this only supports falling back from RTP to ACH (type=rtp and fallback_type=ach)',
        enum: ['ach'],
      },
      foreign_exchange_contract: {
        type: 'string',
        description:
          'If present, indicates a specific foreign exchange contract number that has been generated by your financial institution.',
      },
      foreign_exchange_indicator: {
        type: 'string',
        description:
          'Indicates the type of FX transfer to initiate, can be either `variable_to_fixed`, `fixed_to_variable`, or `null` if the payment order currency matches the originating account currency.',
        enum: ['fixed_to_variable', 'variable_to_fixed'],
      },
      line_items: {
        type: 'array',
        description: 'An array of line items that must sum up to the amount of the payment order.',
        items: {
          type: 'object',
          properties: {
            amount: {
              type: 'integer',
              description:
                "Value in specified currency's smallest unit. e.g. $10 would be represented as 1000.",
            },
            accounting_category_id: {
              type: 'string',
              description:
                'The ID of one of your accounting categories. Note that these will only be accessible if your accounting system has been connected.',
            },
            description: {
              type: 'string',
              description: 'A free-form description of the line item.',
            },
            metadata: {
              type: 'object',
              description:
                'Additional data represented as key-value pairs. Both the key and value must be strings.',
            },
          },
          required: ['amount'],
        },
      },
      metadata: {
        type: 'object',
        description:
          'Additional data represented as key-value pairs. Both the key and value must be strings.',
      },
      nsf_protected: {
        type: 'boolean',
        description:
          'A boolean to determine if NSF Protection is enabled for this payment order. Note that this setting must also be turned on in your organization settings page.',
      },
      originating_account_id: {
        type: 'string',
        description: "The ID of one of your organization's internal accounts.",
      },
      originating_party_name: {
        type: 'string',
        description:
          "If present, this will replace your default company name on receiver's bank statement. This field can only be used for ACH payments currently. For ACH, only the first 16 characters of this string will be used. Any additional characters will be truncated.",
      },
      priority: {
        type: 'string',
        description:
          'Either `normal` or `high`. For ACH and EFT payments, `high` represents a same-day ACH or EFT transfer, respectively. For check payments, `high` can mean an overnight check rather than standard mail.',
        enum: ['high', 'normal'],
      },
      process_after: {
        type: 'string',
        description:
          'If present, Modern Treasury will not process the payment until after this time. If `process_after` is past the cutoff for `effective_date`, `process_after` will take precedence and `effective_date` will automatically update to reflect the earliest possible sending date after `process_after`. Format is ISO8601 timestamp.',
        format: 'date-time',
      },
      purpose: {
        type: 'string',
        description:
          'For `wire`, this is usually the purpose which is transmitted via the "InstrForDbtrAgt" field in the ISO20022 file. For `eft`, this field is the 3 digit CPA Code that will be attached to the payment.',
      },
      receiving_account: {
        type: 'object',
        description:
          'Either `receiving_account` or `receiving_account_id` must be present. When using `receiving_account_id`, you may pass the id of an external account or an internal account.',
        properties: {
          account_details: {
            type: 'array',
            items: {
              type: 'object',
              properties: {
                account_number: {
                  type: 'string',
                },
                account_number_type: {
                  type: 'string',
                  enum: [
                    'au_number',
                    'base_address',
                    'clabe',
                    'ethereum_address',
                    'hk_number',
                    'iban',
                    'id_number',
                    'nz_number',
                    'other',
                    'pan',
                    'polygon_address',
                    'sg_number',
                    'solana_address',
                    'wallet_address',
                  ],
                },
              },
              required: ['account_number'],
            },
          },
          account_type: {
            $ref: '#/$defs/external_account_type',
          },
          contact_details: {
            type: 'array',
            items: {
              $ref: '#/$defs/contact_detail_create_request',
            },
          },
          external_id: {
            type: 'string',
            description: 'An optional user-defined 180 character unique identifier.',
          },
          ledger_account: {
            $ref: '#/$defs/ledger_account_create_request',
          },
          metadata: {
            type: 'object',
            description:
              'Additional data represented as key-value pairs. Both the key and value must be strings.',
          },
          name: {
            type: 'string',
            description:
              "A nickname for the external account. This is only for internal usage and won't affect any payments",
          },
          party_address: {
            $ref: '#/$defs/address_request',
          },
          party_identifier: {
            type: 'string',
          },
          party_name: {
            type: 'string',
            description: "If this value isn't provided, it will be inherited from the counterparty's name.",
          },
          party_type: {
            type: 'string',
            description: 'Either `individual` or `business`.',
            enum: ['business', 'individual'],
          },
          plaid_processor_token: {
            type: 'string',
            description:
              "If you've enabled the Modern Treasury + Plaid integration in your Plaid account, you can pass the processor token in this field.",
          },
          routing_details: {
            type: 'array',
            items: {
              type: 'object',
              properties: {
                routing_number: {
                  type: 'string',
                },
                routing_number_type: {
                  type: 'string',
                  enum: [
                    'aba',
                    'au_bsb',
                    'br_codigo',
                    'ca_cpa',
                    'chips',
                    'cnaps',
                    'dk_interbank_clearing_code',
                    'gb_sort_code',
                    'hk_interbank_clearing_code',
                    'hu_interbank_clearing_code',
                    'id_sknbi_code',
                    'il_bank_code',
                    'in_ifsc',
                    'jp_zengin_code',
                    'my_branch_code',
                    'mx_bank_identifier',
                    'nz_national_clearing_code',
                    'pl_national_clearing_code',
                    'se_bankgiro_clearing_code',
                    'sg_interbank_clearing_code',
                    'swift',
                    'za_national_clearing_code',
                  ],
                },
                payment_type: {
                  type: 'string',
                  enum: [
                    'ach',
                    'au_becs',
                    'bacs',
                    'base',
                    'book',
                    'card',
                    'chats',
                    'check',
                    'cross_border',
                    'dk_nets',
                    'eft',
                    'ethereum',
                    'hu_ics',
                    'interac',
                    'masav',
                    'mx_ccen',
                    'neft',
                    'nics',
                    'nz_becs',
                    'pl_elixir',
                    'polygon',
                    'provxchange',
                    'ro_sent',
                    'rtp',
                    'se_bankgirot',
                    'sen',
                    'sepa',
                    'sg_giro',
                    'sic',
                    'signet',
                    'sknbi',
                    'solana',
                    'wire',
                    'zengin',
                  ],
                },
              },
              required: ['routing_number', 'routing_number_type'],
            },
          },
        },
      },
      receiving_account_id: {
        type: 'string',
        description:
          'Either `receiving_account` or `receiving_account_id` must be present. When using `receiving_account_id`, you may pass the id of an external account or an internal account.',
      },
      remittance_information: {
        type: 'string',
        description:
          'For `ach`, this field will be passed through on an addenda record. For `wire` payments the field will be passed through as the "Originator to Beneficiary Information", also known as OBI or Fedwire tag 6000.',
      },
      send_remittance_advice: {
        type: 'boolean',
        description:
          'Send an email to the counterparty when the payment order is sent to the bank. If `null`, `send_remittance_advice` on the Counterparty is used.',
      },
      statement_descriptor: {
        type: 'string',
        description:
          "An optional descriptor which will appear in the receiver's statement. For `check` payments this field will be used as the memo line. For `ach` the maximum length is 10 characters. Note that for ACH payments, the name on your bank account will be included automatically by the bank, so you can use the characters for other useful information. For `eft` the maximum length is 15 characters.",
      },
      status: {
        type: 'string',
        description:
          'To cancel a payment order, use `cancelled`. To redraft a returned payment order, use `approved`. To undo approval on a denied or approved payment order, use `needs_approval`.',
        enum: [
          'approved',
          'cancelled',
          'completed',
          'denied',
          'failed',
          'needs_approval',
          'pending',
          'processing',
          'returned',
          'reversed',
          'sent',
          'stopped',
        ],
      },
      subtype: {
        $ref: '#/$defs/payment_order_subtype',
      },
      type: {
        $ref: '#/$defs/payment_order_type',
      },
      ultimate_originating_party_identifier: {
        type: 'string',
        description:
          'This represents the identifier by which the person is known to the receiver when using the CIE subtype for ACH payments. Only the first 22 characters of this string will be used. Any additional characters will be truncated.',
      },
      ultimate_originating_party_name: {
        type: 'string',
        description:
          'This represents the name of the person that the payment is on behalf of when using the CIE subtype for ACH payments. Only the first 15 characters of this string will be used. Any additional characters will be truncated.',
      },
      ultimate_receiving_party_identifier: {
        type: 'string',
        description:
          'This represents the name of the merchant that the payment is being sent to when using the CIE subtype for ACH payments. Only the first 22 characters of this string will be used. Any additional characters will be truncated.',
      },
      ultimate_receiving_party_name: {
        type: 'string',
        description:
          'This represents the identifier by which the merchant is known to the person initiating an ACH payment with CIE subtype. Only the first 15 characters of this string will be used. Any additional characters will be truncated.',
      },
    },
    required: ['id'],
    $defs: {
      accounting: {
        type: 'object',
        properties: {
          account_id: {
            type: 'string',
            description:
              'The ID of one of your accounting categories. Note that these will only be accessible if your accounting system has been connected.',
          },
          class_id: {
            type: 'string',
            description:
              'The ID of one of the class objects in your accounting system. Class objects track segments of your business independent of client or project. Note that these will only be accessible if your accounting system has been connected.',
          },
        },
      },
      currency: {
        type: 'string',
        description: 'Three-letter ISO currency code.',
        enum: [
          'AED',
          'AFN',
          'ALL',
          'AMD',
          'ANG',
          'AOA',
          'ARS',
          'AUD',
          'AWG',
          'AZN',
          'BAM',
          'BBD',
          'BCH',
          'BDT',
          'BGN',
          'BHD',
          'BIF',
          'BMD',
          'BND',
          'BOB',
          'BRL',
          'BSD',
          'BTC',
          'BTN',
          'BWP',
          'BYN',
          'BYR',
          'BZD',
          'CAD',
          'CDF',
          'CHF',
          'CLF',
          'CLP',
          'CNH',
          'CNY',
          'COP',
          'CRC',
          'CUC',
          'CUP',
          'CVE',
          'CZK',
          'DJF',
          'DKK',
          'DOP',
          'DZD',
          'EEK',
          'EGP',
          'ERN',
          'ETB',
          'EUR',
          'EURC',
          'FJD',
          'FKP',
          'GBP',
          'GBX',
          'GEL',
          'GGP',
          'GHS',
          'GIP',
          'GMD',
          'GNF',
          'GTQ',
          'GYD',
          'HKD',
          'HNL',
          'HRK',
          'HTG',
          'HUF',
          'IDR',
          'ILS',
          'IMP',
          'INR',
          'IQD',
          'IRR',
          'ISK',
          'JEP',
          'JMD',
          'JOD',
          'JPY',
          'KES',
          'KGS',
          'KHR',
          'KMF',
          'KPW',
          'KRW',
          'KWD',
          'KYD',
          'KZT',
          'LAK',
          'LBP',
          'LKR',
          'LRD',
          'LSL',
          'LTL',
          'LVL',
          'LYD',
          'MAD',
          'MDL',
          'MGA',
          'MKD',
          'MMK',
          'MNT',
          'MOP',
          'MRO',
          'MRU',
          'MTL',
          'MUR',
          'MVR',
          'MWK',
          'MXN',
          'MYR',
          'MZN',
          'NAD',
          'NGN',
          'NIO',
          'NOK',
          'NPR',
          'NZD',
          'OMR',
          'PAB',
          'PEN',
          'PGK',
          'PHP',
          'PKR',
          'PLN',
          'PYG',
          'PYUSD',
          'QAR',
          'RON',
          'RSD',
          'RUB',
          'RWF',
          'SAR',
          'SBC',
          'SBD',
          'SCR',
          'SDG',
          'SEK',
          'SGD',
          'SHP',
          'SKK',
          'SLL',
          'SOS',
          'SRD',
          'SSP',
          'STD',
          'SVC',
          'SYP',
          'SZL',
          'THB',
          'TJS',
          'TMM',
          'TMT',
          'TND',
          'TOP',
          'TRY',
          'TTD',
          'TWD',
          'TZS',
          'UAH',
          'UGX',
          'USD',
          'USDB',
          'USDC',
          'USDP',
          'USDT',
          'UYU',
          'UZS',
          'VEF',
          'VES',
          'VND',
          'VUV',
          'WST',
          'XAF',
          'XAG',
          'XAU',
          'XBA',
          'XBB',
          'XBC',
          'XBD',
          'XCD',
          'XDR',
          'XFU',
          'XOF',
          'XPD',
          'XPF',
          'XPT',
          'XTS',
          'YER',
          'ZAR',
          'ZMK',
          'ZMW',
          'ZWD',
          'ZWL',
          'ZWN',
          'ZWR',
        ],
      },
      external_account_type: {
        type: 'string',
        description: 'Can be `checking`, `savings` or `other`.',
        enum: [
          'base_wallet',
          'cash',
          'checking',
          'crypto_wallet',
          'ethereum_wallet',
          'general_ledger',
          'loan',
          'non_resident',
          'other',
          'overdraft',
          'polygon_wallet',
          'savings',
          'solana_wallet',
        ],
      },
      contact_detail_create_request: {
        type: 'object',
        properties: {
          contact_identifier: {
            type: 'string',
          },
          contact_identifier_type: {
            type: 'string',
            enum: ['email', 'phone_number', 'website'],
          },
        },
      },
      ledger_account_create_request: {
        type: 'object',
        properties: {
          currency: {
            type: 'string',
            description: 'The currency of the ledger account.',
          },
          ledger_id: {
            type: 'string',
            description: 'The id of the ledger that this account belongs to.',
          },
          name: {
            type: 'string',
            description: 'The name of the ledger account.',
          },
          normal_balance: {
            $ref: '#/$defs/transaction_direction',
          },
          currency_exponent: {
            type: 'integer',
            description: 'The currency exponent of the ledger account.',
          },
          description: {
            type: 'string',
            description: 'The description of the ledger account.',
          },
          ledger_account_category_ids: {
            type: 'array',
            description:
              'The array of ledger account category ids that this ledger account should be a child of.',
            items: {
              type: 'string',
            },
          },
          ledgerable_id: {
            type: 'string',
            description:
              'If the ledger account links to another object in Modern Treasury, the id will be populated here, otherwise null.',
          },
          ledgerable_type: {
            type: 'string',
            description:
              'If the ledger account links to another object in Modern Treasury, the type will be populated here, otherwise null. The value is one of internal_account or external_account.',
            enum: ['counterparty', 'external_account', 'internal_account', 'virtual_account'],
          },
          metadata: {
            type: 'object',
            description:
              'Additional data represented as key-value pairs. Both the key and value must be strings.',
          },
        },
        required: ['currency', 'ledger_id', 'name', 'normal_balance'],
      },
      transaction_direction: {
        type: 'string',
        enum: ['credit', 'debit'],
      },
      address_request: {
        type: 'object',
        properties: {
          country: {
            type: 'string',
            description: 'Country code conforms to [ISO 3166-1 alpha-2]',
          },
          line1: {
            type: 'string',
          },
          line2: {
            type: 'string',
          },
          locality: {
            type: 'string',
            description: 'Locality or City.',
          },
          postal_code: {
            type: 'string',
            description: 'The postal code of the address.',
          },
          region: {
            type: 'string',
            description: 'Region or State.',
          },
        },
      },
      payment_order_subtype: {
        type: 'string',
        description:
          'An additional layer of classification for the type of payment order you are doing. This field is only used for `ach` payment orders currently. For `ach`  payment orders, the `subtype`  represents the SEC code. We currently support `CCD`, `PPD`, `IAT`, `CTX`, `WEB`, `CIE`, and `TEL`.',
        enum: [
          '0C',
          '0N',
          '0S',
          'CCD',
          'CIE',
          'CTX',
          'IAT',
          'PPD',
          'TEL',
          'WEB',
          'au_becs',
          'bacs',
          'chats',
          'dk_nets',
          'eft',
          'hu_ics',
          'masav',
          'mx_ccen',
          'neft',
          'nics',
          'nz_becs',
          'pl_elixir',
          'ro_sent',
          'se_bankgirot',
          'sepa',
          'sg_giro',
          'sic',
          'sknbi',
          'zengin',
        ],
      },
      payment_order_type: {
        type: 'string',
        description:
          'One of `ach`, `se_bankgirot`, `eft`, `wire`, `check`, `sen`, `book`, `rtp`, `sepa`, `bacs`, `au_becs`, `interac`, `neft`, `nics`, `nz_national_clearing_code`, `sic`, `signet`, `provexchange`, `zengin`.',
        enum: [
          'ach',
          'au_becs',
          'bacs',
          'base',
          'book',
          'card',
          'chats',
          'check',
          'cross_border',
          'dk_nets',
          'eft',
          'ethereum',
          'hu_ics',
          'interac',
          'masav',
          'mx_ccen',
          'neft',
          'nics',
          'nz_becs',
          'pl_elixir',
          'polygon',
          'provxchange',
          'ro_sent',
          'rtp',
          'se_bankgirot',
          'sen',
          'sepa',
          'sg_giro',
          'sic',
          'signet',
          'sknbi',
          'solana',
          'wire',
          'zengin',
        ],
      },
    },
  },
  annotations: {},
};

export const handler = async (client: ModernTreasury, args: Record<string, unknown> | undefined) => {
  const { id, ...body } = args as any;
  return asTextContentResult(await client.paymentOrders.update(id, body));
};

export default { metadata, tool, handler };
